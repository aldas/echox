<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cookbooks on Echo - High performance, minimalist Go web framework</title>
    <link>https://echo.labstack.com/cookbook/</link>
    <description>Recent content in Cookbooks on Echo - High performance, minimalist Go web framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://echo.labstack.com/cookbook/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Auto TLS Recipe</title>
      <link>https://echo.labstack.com/cookbook/auto-tls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/auto-tls/</guid>
      <description>This recipe demonstrates how to obtain TLS certificates for a domain automatically from Let&amp;rsquo;s Encrypt. Echo#StartAutoTLS accepts an address which should listen on port 443.
Browse to https://&amp;lt;DOMAIN&amp;gt;. If everything goes fine, you should see a welcome message with TLS enabled on the website.
   For added security you should specify host policy in auto TLS manager Cache certificates to avoid issues with rate limits (https://letsencrypt.org/docs/rate-limits) To redirect HTTP traffic to HTTPS, you can use redirect middleware  Server server.</description>
    </item>
    
    <item>
      <title>CORS Recipe</title>
      <link>https://echo.labstack.com/cookbook/cors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/cors/</guid>
      <description>Server using a list of allowed origins server.go
 Server using a custom function to allow origins server.go
 Source Code </description>
    </item>
    
    <item>
      <title>CRUD Recipe</title>
      <link>https://echo.labstack.com/cookbook/crud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/crud/</guid>
      <description>Server server.go
 Client curl
Create User curl -X POST \  -H &amp;#39;Content-Type: application/json&amp;#39; \  -d &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Joe Smith&amp;#34;}&amp;#39; \  localhost:1323/users Response
{ &amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;Joe Smith&amp;#34; } Get User curl localhost:1323/users/1 Response
{ &amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;Joe Smith&amp;#34; } Update User curl -X PUT \  -H &amp;#39;Content-Type: application/json&amp;#39; \  -d &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Joe&amp;#34;}&amp;#39; \  localhost:1323/users/1 Response
{ &amp;#34;id&amp;#34;: 1, &amp;#34;name&amp;#34;: &amp;#34;Joe&amp;#34; } Delete User curl -X DELETE localhost:1323/users/1 Response</description>
    </item>
    
    <item>
      <title>Embed Resources Recipe</title>
      <link>https://echo.labstack.com/cookbook/embed-resources/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/embed-resources/</guid>
      <description>With go.rice server.go
 Source Code With go 1.16 embed feature server.go
 Source Code </description>
    </item>
    
    <item>
      <title>File Download Recipe</title>
      <link>https://echo.labstack.com/cookbook/file-download/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/file-download/</guid>
      <description>How to download a file? Server server.go
 Client index.html
 How to download a file as inline, opening it in the browser? Server server.go
 Client index.html
 How to download a file as attachment, prompting client to save the file? Server server.go
 Client index.html
 </description>
    </item>
    
    <item>
      <title>File Upload Recipe</title>
      <link>https://echo.labstack.com/cookbook/file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/file-upload/</guid>
      <description>How to upload a single file with parameters? Server server.go
 Client index.html
 How to upload multiple files with parameters? Server server.go
 Client index.html
 Source Code  single multiple  </description>
    </item>
    
    <item>
      <title>Google App Engine Recipe</title>
      <link>https://echo.labstack.com/cookbook/google-app-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/google-app-engine/</guid>
      <description>Google App Engine (GAE) provides a range of hosting options from pure PaaS (App Engine Classic) through Managed VMs to fully self-managed or container-driven Compute Engine instances. Echo works great with all of these but requires a few changes to the usual examples to run on the AppEngine Classic and Managed VM options. With a small amount of effort though it&amp;rsquo;s possible to produce a codebase that will run on these and also non-managed platforms automatically.</description>
    </item>
    
    <item>
      <title>Graceful Shutdown Recipe</title>
      <link>https://echo.labstack.com/cookbook/graceful-shutdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/graceful-shutdown/</guid>
      <description>Using http.Server#Shutdown() server.go
  Requires go1.8+
 Using grace server.go
 Using graceful server.go
 Source Code </description>
    </item>
    
    <item>
      <title>Hello World Recipe</title>
      <link>https://echo.labstack.com/cookbook/hello-world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/hello-world/</guid>
      <description>Server server.go
 Source Code </description>
    </item>
    
    <item>
      <title>HTTP/2 Recipe</title>
      <link>https://echo.labstack.com/cookbook/http2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/http2/</guid>
      <description>How to run an HTTP/2 server? Step 1: Generate a self-signed X.509 TLS certificate Run the following command to generate cert.pem and key.pem files:
go run $GOROOT/src/crypto/tls/generate_cert.go --host localhost  For demo purpose, we are using a self-signed certificate. Ideally, you should obtain a certificate from CA.
 Step 2: Create a handler which simply outputs the request information to the client e.GET(&amp;#34;/request&amp;#34;, func(c echo.Context) error { req := c.Request() format := ` &amp;lt;code&amp;gt; Protocol: %s&amp;lt;br&amp;gt; Host: %s&amp;lt;br&amp;gt; Remote Address: %s&amp;lt;br&amp;gt; Method: %s&amp;lt;br&amp;gt; Path: %s&amp;lt;br&amp;gt; &amp;lt;/code&amp;gt; ` return c.</description>
    </item>
    
    <item>
      <title>HTTP/2 Server Push Recipe</title>
      <link>https://echo.labstack.com/cookbook/http2-server-push/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/http2-server-push/</guid>
      <description>Requires go1.8+
 How to send web assets using HTTP/2 server push? Step 1: Generate a self-signed X.509 TLS certificate Step 2: Register a route to serve web assets e.Static(&amp;#34;/&amp;#34;, &amp;#34;static&amp;#34;) Step 3: Create a handler to serve index.html and push it&amp;rsquo;s dependencies e.GET(&amp;#34;/&amp;#34;, func(c echo.Context) (err error) { pusher, ok := c.Response().Writer.(http.Pusher) if ok { if err = pusher.Push(&amp;#34;/app.css&amp;#34;, nil); err != nil { return } if err = pusher.</description>
    </item>
    
    <item>
      <title>JSONP Recipe</title>
      <link>https://echo.labstack.com/cookbook/jsonp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/jsonp/</guid>
      <description>JSONP is a method that allows cross-domain server calls. You can read more about it at the JSON versus JSONP Tutorial.
Server server.go
 Client index.html
 Source Code </description>
    </item>
    
    <item>
      <title>JWT Recipe</title>
      <link>https://echo.labstack.com/cookbook/jwt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/jwt/</guid>
      <description>JWT authentication using HS256 algorithm. JWT is retrieved from Authorization request header.  Server using Map claims server.go
 Server using custom claims server.go
 Client curl
Login Login using username and password to retrieve a token.
curl -X POST -d &amp;#39;username=jon&amp;#39; -d &amp;#39;password=shhh!&amp;#39; localhost:1323/login Response
{ &amp;#34;token&amp;#34;: &amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY&amp;#34; } Request Request a restricted resource using the token in Authorization request header.
curl localhost:1323/restricted -H &amp;#34;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NjE5NTcxMzZ9.RB3arc4-OyzASAaUhC2W3ReWaXAt_z2Fd3BN4aWTgEY&amp;#34; Response</description>
    </item>
    
    <item>
      <title>Load Balancing Recipe</title>
      <link>https://echo.labstack.com/cookbook/load-balancing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/load-balancing/</guid>
      <description>This recipe demonstrates how you can use Nginx or Armor as a reverse proxy server and load balance between multiple Echo servers.
How to setup Nginx proxy server with Echo? Step 1: Install Nginx https://www.nginx.com/resources/wiki/start/topics/tutorials/install
Step 2: Configure Nginx Create a file /etc/nginx/sites-enabled/localhost with the following content:
  Change listen, server_name, access_log per your need.
 Step 3: Restart Nginx service nginx restart
Step 4: Start upstream servers  cd upstream go run server.</description>
    </item>
    
    <item>
      <title>Middleware Recipe</title>
      <link>https://echo.labstack.com/cookbook/middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/middleware/</guid>
      <description>How to write a custom middleware?  Middleware to collect request count, statuses and uptime. Middleware to write custom Server header to the response.  Server server.go
 Response Headers
Content-Length:122 Content-Type:application/json; charset=utf-8 Date:Thu, 14 Apr 2016 20:31:46 GMT Server:Echo/3.0 Body
{ &amp;#34;uptime&amp;#34;: &amp;#34;2016-04-14T13:28:48.486548936-07:00&amp;#34;, &amp;#34;requestCount&amp;#34;: 5, &amp;#34;statuses&amp;#34;: { &amp;#34;200&amp;#34;: 4, &amp;#34;404&amp;#34;: 1 } } Source Code </description>
    </item>
    
    <item>
      <title>Reverse Proxy Recipe</title>
      <link>https://echo.labstack.com/cookbook/reverse-proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/reverse-proxy/</guid>
      <description>How to use Echo as a reverse proxy server? This recipe demonstrates how you can use Echo as a reverse proxy server and load balancer in front of your favorite applications like WordPress, Node.js, Java, Python, Ruby or even Go. For simplicity, I will use Go upstream servers with WebSocket.
Step 1: Identify upstream target URLs url1, err := url.Parse(&amp;#34;http://localhost:8081&amp;#34;) if err != nil { e.Logger.Fatal(err) } url2, err := url.</description>
    </item>
    
    <item>
      <title>Streaming Response Recipe</title>
      <link>https://echo.labstack.com/cookbook/streaming-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/streaming-response/</guid>
      <description> Send data as it is produced Streaming JSON response with chunked transfer encoding  Server server.go
 Client $ curl localhost:1323 Output {&amp;#34;Altitude&amp;#34;:-97,&amp;#34;Latitude&amp;#34;:37.819929,&amp;#34;Longitude&amp;#34;:-122.478255} {&amp;#34;Altitude&amp;#34;:1899,&amp;#34;Latitude&amp;#34;:39.096849,&amp;#34;Longitude&amp;#34;:-120.032351} {&amp;#34;Altitude&amp;#34;:2619,&amp;#34;Latitude&amp;#34;:37.865101,&amp;#34;Longitude&amp;#34;:-119.538329} {&amp;#34;Altitude&amp;#34;:42,&amp;#34;Latitude&amp;#34;:33.812092,&amp;#34;Longitude&amp;#34;:-117.918974} {&amp;#34;Altitude&amp;#34;:15,&amp;#34;Latitude&amp;#34;:37.77493,&amp;#34;Longitude&amp;#34;:-122.419416} Source Code </description>
    </item>
    
    <item>
      <title>Subdomains Recipe</title>
      <link>https://echo.labstack.com/cookbook/subdomains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/subdomains/</guid>
      <description>server.go
 Source Code </description>
    </item>
    
    <item>
      <title>Timeouts Recipe</title>
      <link>https://echo.labstack.com/cookbook/timeouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/timeouts/</guid>
      <description>server.go
 Source Code </description>
    </item>
    
    <item>
      <title>Twitter Like API Recipe</title>
      <link>https://echo.labstack.com/cookbook/twitter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/twitter/</guid>
      <description>This recipe demonstrates how to create a Twitter like REST API using MongoDB (Database), JWT (API security) and JSON (Data exchange).
Models user.go
 post.go
 Handlers handler.go
 user.go
 post.go
 Server server.go
 API Signup User signup
 Retrieve user credentials from the body and validate against database. For invalid email or password, send 400 - Bad Request response. For valid email and password, save user in database and send 201 - Created response.</description>
    </item>
    
    <item>
      <title>WebSocket Recipe</title>
      <link>https://echo.labstack.com/cookbook/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://echo.labstack.com/cookbook/websocket/</guid>
      <description>Using net WebSocket Server server.go
 Using gorilla WebSocket Server server.go
 Client index.html
 Output Client
Hello, Client! Hello, Client! Hello, Client! Hello, Client! Hello, Client! Server
Hello, Server! Hello, Server! Hello, Server! Hello, Server! Hello, Server! Source Code </description>
    </item>
    
  </channel>
</rss>
